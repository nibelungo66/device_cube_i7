diff -rupN linux-4.4.11.orig/drivers/thermal/step_wise.c linux-4.4.11/drivers/thermal/step_wise.c
--- linux-4.4.11.orig/drivers/thermal/step_wise.c	2016-05-25 16:56:04.231970294 -0400
+++ linux-4.4.11/drivers/thermal/step_wise.c	2016-05-25 16:58:21.615963605 -0400
@@ -63,19 +63,6 @@ static unsigned long get_target_state(st
 	next_target = instance->target;
 	dev_dbg(&cdev->device, "cur_state=%ld\n", cur_state);
 
-	if (!instance->initialized) {
-		if (throttle) {
-			next_target = (cur_state + 1) >= instance->upper ?
-					instance->upper :
-					((cur_state + 1) < instance->lower ?
-					instance->lower : (cur_state + 1));
-		} else {
-			next_target = THERMAL_NO_TARGET;
-		}
-
-		return next_target;
-	}
-
 	switch (trend) {
 	case THERMAL_TREND_RAISING:
 		if (throttle) {
@@ -162,7 +149,7 @@ static void thermal_zone_trip_update(str
 		dev_dbg(&instance->cdev->device, "old_target=%d, target=%d\n",
 					old_target, (int)instance->target);
 
-		if (instance->initialized && old_target == instance->target)
+		if (old_target == instance->target)
 			continue;
 
 		/* Activate a passive thermal instance */
@@ -174,7 +161,7 @@ static void thermal_zone_trip_update(str
 			instance->target == THERMAL_NO_TARGET)
 			update_passive_instance(tz, trip_type, -1);
 
-		instance->initialized = true;
+
 		instance->cdev->updated = false; /* cdev needs update */
 	}
 
diff -rupN linux-4.4.11.orig/drivers/thermal/thermal_core.c linux-4.4.11/drivers/thermal/thermal_core.c
--- linux-4.4.11.orig/drivers/thermal/thermal_core.c	2016-05-25 16:56:04.231970294 -0400
+++ linux-4.4.11/drivers/thermal/thermal_core.c	2016-05-25 16:59:21.003960714 -0400
@@ -37,7 +37,6 @@
 #include <linux/of.h>
 #include <net/netlink.h>
 #include <net/genetlink.h>
-#include <linux/suspend.h>
 
 #define CREATE_TRACE_POINTS
 #include <trace/events/thermal.h>
@@ -60,8 +59,6 @@ static LIST_HEAD(thermal_governor_list);
 static DEFINE_MUTEX(thermal_list_lock);
 static DEFINE_MUTEX(thermal_governor_lock);
 
-static atomic_t in_suspend;
-
 static struct thermal_governor *def_governor;
 
 static struct thermal_governor *__find_governor(const char *name)
@@ -454,10 +451,6 @@ static void handle_thermal_trip(struct t
 {
 	enum thermal_trip_type type;
 
-	/* Ignore disabled trip points */
-	if (test_bit(trip, &tz->trips_disabled))
-		return;
-
 	tz->ops->get_trip_type(tz, trip, &type);
 
 	if (type == THERMAL_TRIP_CRITICAL || type == THERMAL_TRIP_HOT)
@@ -539,31 +532,14 @@ static void update_temperature(struct th
 	mutex_unlock(&tz->lock);
 
 	trace_thermal_temperature(tz);
-	if (tz->last_temperature == THERMAL_TEMP_INVALID)
-		dev_dbg(&tz->device, "last_temperature N/A, current_temperature=%d\n",
-			tz->temperature);
-	else
-		dev_dbg(&tz->device, "last_temperature=%d, current_temperature=%d\n",
-			tz->last_temperature, tz->temperature);
-}
-
-static void thermal_zone_device_reset(struct thermal_zone_device *tz)
-{
-	struct thermal_instance *pos;
-
-	tz->temperature = THERMAL_TEMP_INVALID;
-	tz->passive = 0;
-	list_for_each_entry(pos, &tz->thermal_instances, tz_node)
-		pos->initialized = false;
+	dev_dbg(&tz->device, "last_temperature=%d, current_temperature=%d\n",
+				tz->last_temperature, tz->temperature);
 }
 
 void thermal_zone_device_update(struct thermal_zone_device *tz)
 {
 	int count;
 
-	if (atomic_read(&in_suspend))
-		return;
-
 	if (!tz->ops->get_temp)
 		return;
 
@@ -1345,7 +1321,6 @@ int thermal_zone_bind_cooling_device(str
 	if (!result) {
 		list_add_tail(&dev->tz_node, &tz->thermal_instances);
 		list_add_tail(&dev->cdev_node, &cdev->thermal_instances);
-		atomic_set(&tz->need_update, 1);
 	}
 	mutex_unlock(&cdev->lock);
 	mutex_unlock(&tz->lock);
@@ -1455,7 +1430,6 @@ __thermal_cooling_device_register(struct
 				  const struct thermal_cooling_device_ops *ops)
 {
 	struct thermal_cooling_device *cdev;
-	struct thermal_zone_device *pos = NULL;
 	int result;
 
 	if (type && strlen(type) >= THERMAL_NAME_LENGTH)
@@ -1500,12 +1474,6 @@ __thermal_cooling_device_register(struct
 	/* Update binding information for 'this' new cdev */
 	bind_cdev(cdev);
 
-	mutex_lock(&thermal_list_lock);
-	list_for_each_entry(pos, &thermal_tz_list, node)
-		if (atomic_cmpxchg(&pos->need_update, 1, 0))
-			thermal_zone_device_update(pos);
-	mutex_unlock(&thermal_list_lock);
-
 	return cdev;
 }
 
@@ -1800,7 +1768,6 @@ struct thermal_zone_device *thermal_zone
 {
 	struct thermal_zone_device *tz;
 	enum thermal_trip_type trip_type;
-	int trip_temp;
 	int result;
 	int count;
 	int passive = 0;
@@ -1839,8 +1806,6 @@ struct thermal_zone_device *thermal_zone
 	tz->trips = trips;
 	tz->passive_delay = passive_delay;
 	tz->polling_delay = polling_delay;
-	/* A new thermal zone needs to be updated anyway. */
-	atomic_set(&tz->need_update, 1);
 
 	dev_set_name(&tz->device, "thermal_zone%d", tz->id);
 	result = device_register(&tz->device);
@@ -1872,15 +1837,9 @@ struct thermal_zone_device *thermal_zone
 		goto unregister;
 
 	for (count = 0; count < trips; count++) {
-		if (tz->ops->get_trip_type(tz, count, &trip_type))
-			set_bit(count, &tz->trips_disabled);
+		tz->ops->get_trip_type(tz, count, &trip_type);
 		if (trip_type == THERMAL_TRIP_PASSIVE)
 			passive = 1;
-		if (tz->ops->get_trip_temp(tz, count, &trip_temp))
-			set_bit(count, &tz->trips_disabled);
-		/* Check for bogus trip points */
-		if (trip_temp == 0)
-			set_bit(count, &tz->trips_disabled);
 	}
 
 	if (!passive) {
@@ -1941,10 +1900,7 @@ struct thermal_zone_device *thermal_zone
 
 	INIT_DELAYED_WORK(&(tz->poll_queue), thermal_zone_device_check);
 
-	thermal_zone_device_reset(tz);
-	/* Update the new thermal zone and mark it as already updated. */
-	if (atomic_cmpxchg(&tz->need_update, 1, 0))
-		thermal_zone_device_update(tz);
+	thermal_zone_device_update(tz);
 
 	return tz;
 
@@ -2184,36 +2140,6 @@ static void thermal_unregister_governors
 	thermal_gov_power_allocator_unregister();
 }
 
-static int thermal_pm_notify(struct notifier_block *nb,
-				unsigned long mode, void *_unused)
-{
-	struct thermal_zone_device *tz;
-
-	switch (mode) {
-	case PM_HIBERNATION_PREPARE:
-	case PM_RESTORE_PREPARE:
-	case PM_SUSPEND_PREPARE:
-		atomic_set(&in_suspend, 1);
-		break;
-	case PM_POST_HIBERNATION:
-	case PM_POST_RESTORE:
-	case PM_POST_SUSPEND:
-		atomic_set(&in_suspend, 0);
-		list_for_each_entry(tz, &thermal_tz_list, node) {
-			thermal_zone_device_reset(tz);
-			thermal_zone_device_update(tz);
-		}
-		break;
-	default:
-		break;
-	}
-	return 0;
-}
-
-static struct notifier_block thermal_pm_nb = {
-	.notifier_call = thermal_pm_notify,
-};
-
 static int __init thermal_init(void)
 {
 	int result;
@@ -2234,11 +2160,6 @@ static int __init thermal_init(void)
 	if (result)
 		goto exit_netlink;
 
-	result = register_pm_notifier(&thermal_pm_nb);
-	if (result)
-		pr_warn("Thermal: Can not register suspend notifier, return %d\n",
-			result);
-
 	return 0;
 
 exit_netlink:
@@ -2258,7 +2179,6 @@ error:
 
 static void __exit thermal_exit(void)
 {
-	unregister_pm_notifier(&thermal_pm_nb);
 	of_thermal_destroy_zones();
 	genetlink_exit();
 	class_unregister(&thermal_class);
diff -rupN linux-4.4.11.orig/drivers/thermal/thermal_core.h linux-4.4.11/drivers/thermal/thermal_core.h
--- linux-4.4.11.orig/drivers/thermal/thermal_core.h	2016-05-25 16:56:04.231970294 -0400
+++ linux-4.4.11/drivers/thermal/thermal_core.h	2016-05-25 16:58:21.615963605 -0400
@@ -41,7 +41,6 @@ struct thermal_instance {
 	struct thermal_zone_device *tz;
 	struct thermal_cooling_device *cdev;
 	int trip;
-	bool initialized;
 	unsigned long upper;	/* Highest cooling state for this trip point */
 	unsigned long lower;	/* Lowest cooling state for this trip point */
 	unsigned long target;	/* expected cooling state */
diff -rupN linux-4.4.11.orig/include/linux/thermal.h linux-4.4.11/include/linux/thermal.h
--- linux-4.4.11.orig/include/linux/thermal.h	2016-05-25 16:56:08.275970097 -0400
+++ linux-4.4.11/include/linux/thermal.h	2016-05-25 17:00:02.359958701 -0400
@@ -156,7 +156,6 @@ struct thermal_attr {
  * @trip_hyst_attrs:	attributes for trip points for sysfs: trip hysteresis
  * @devdata:	private pointer for device private data
  * @trips:	number of trip points the thermal zone supports
- * @trips_disabled;	bitmap for disabled trips
  * @passive_delay:	number of milliseconds to wait between polls when
  *			performing passive cooling.
  * @polling_delay:	number of milliseconds to wait between polls when
@@ -192,7 +191,6 @@ struct thermal_zone_device {
 	struct thermal_attr *trip_hyst_attrs;
 	void *devdata;
 	int trips;
-	unsigned long trips_disabled;	/* bitmap for disabled trips */
 	int passive_delay;
 	int polling_delay;
 	int temperature;
